#region Copyright
// Copyright (C) 2012 Mathieu Turcotte
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

using NUnit.Framework;
using System;
using System.Security.Cryptography;
using System.Text;

namespace OAuth.Base
{
    [TestFixture]
    class RsaSha1SignatureTest
    {
        private RSAParameters key = new RSAParameters
        {
            // PKCS #1 (A.1.2) Modulus.
            Modulus = new byte[] {
                0x8B, 0x1F, 0x72, 0xAB, 0xC1, 0x81, 0xB5, 0x99, 0x96, 0x88, 0xC0, 0x37, 0x8E, 0x81, 0xB6,
                0x71, 0x1A, 0x66, 0x07, 0x3C, 0x2D, 0xA6, 0xDF, 0xD5, 0x8B, 0x4B, 0xDF, 0x54, 0xB8, 0x62,
                0xEE, 0x59, 0x09, 0x79, 0x23, 0x2F, 0x4C, 0x35, 0x0C, 0x98, 0x4C, 0x96, 0x64, 0x83, 0x92,
                0xAD, 0x9B, 0x75, 0xB8, 0x6A, 0x34, 0x5B, 0x66, 0x0B, 0x79, 0xF0, 0xB7, 0x13, 0x1A, 0x68,
                0x03, 0xDA, 0x68, 0x6D, 0x48, 0x51, 0x5A, 0x68, 0x53, 0xED, 0x72, 0xFF, 0xFA, 0xDD, 0x84,
                0x81, 0xF1, 0x47, 0x3C, 0x58, 0x44, 0x4F, 0x60, 0x26, 0xBB, 0x5D, 0x6B, 0x96, 0xAF, 0x84,
                0x94, 0x63, 0x03, 0xFD, 0x61, 0xBD, 0xA6, 0x04, 0xBD, 0xC8, 0x5D, 0x4D, 0x42, 0x66, 0xBA,
                0x1C, 0x55, 0x3C, 0xA0, 0xB1, 0x08, 0x2D, 0x26, 0xB9, 0x7E, 0x67, 0xFE, 0x49, 0x85, 0xB0,
                0x49, 0x63, 0xC5, 0x7A, 0xEE, 0xB8, 0xD7, 0x63
            },

            // PKCS #1 (A.1.2) Public exponent.
            Exponent = new byte[] { 0x01, 0x00, 0x01 },

            // PKCS #1 (A.1.2) Private exponent.
            D = new byte[] {
                0x29, 0x4D, 0xB7, 0xDC, 0xB8, 0x41, 0x8B, 0x29, 0xC3, 0x20, 0x6C, 0x78, 0xD2, 0x0D, 0x3E,
                0x9E, 0x0B, 0xA9, 0x58, 0xE2, 0x8B, 0xE7, 0x2C, 0x33, 0x18, 0xFC, 0xF8, 0x9C, 0x0D, 0x76,
                0x09, 0xAF, 0x53, 0x79, 0xAC, 0x71, 0x81, 0x5D, 0x8A, 0x94, 0xB8, 0xC0, 0x39, 0xAD, 0x3A,
                0x61, 0xE2, 0x72, 0xAB, 0xC2, 0x94, 0x32, 0xC2, 0x74, 0x0B, 0xCA, 0xE4, 0x7F, 0x7E, 0x6A,
                0x7D, 0x22, 0x5D, 0xB8, 0x0C, 0x17, 0xFF, 0x29, 0xD8, 0xA5, 0x77, 0x80, 0x24, 0x66, 0x7B,
                0x7F, 0xB8, 0xD7, 0x0A, 0x9D, 0x10, 0x38, 0x42, 0x81, 0x3B, 0x6E, 0x5D, 0x98, 0xFF, 0xAE,
                0x3C, 0xF8, 0x17, 0x19, 0x87, 0x5F, 0x7C, 0x90, 0xFB, 0xA5, 0xDE, 0xF2, 0x49, 0x09, 0x01,
                0xB7, 0xC0, 0x24, 0xAF, 0x70, 0x54, 0x03, 0x12, 0xB0, 0x54, 0xF8, 0x1F, 0xAB, 0xD6, 0x96,
                0xF6, 0xCD, 0xCB, 0x49, 0xE4, 0x7C, 0x68, 0xA1
            },

            // PKCS #1 (A.1.2) Prime 1.
            P = new byte[] {
                0xC0, 0xBF, 0x1F, 0x8A, 0x18, 0xDF, 0x3E, 0x40, 0x73, 0xA8, 0x6D, 0x97, 0x07, 0x29, 0x74,
                0xFD, 0xB5, 0x4D, 0x11, 0x36, 0x5E, 0x93, 0xE5, 0xE7, 0x11, 0xC2, 0x03, 0x47, 0x37, 0x25,
                0x8F, 0xDD, 0x56, 0x9E, 0x1B, 0x4B, 0x23, 0xE3, 0xB0, 0xD7, 0x38, 0xC2, 0xD7, 0x2F, 0x18,
                0xFD, 0xBD, 0x7D, 0x05, 0xBA, 0xAA, 0x38, 0x78, 0x92, 0xED, 0xBE, 0xB6, 0xFE, 0x7B, 0x36,
                0x89, 0x8C, 0xAA, 0xD1
            },

            // PKCS #1 (A.1.2) Prime 2.
            Q = new byte[] {
                0xB8, 0xC7, 0x54, 0x40, 0x1C, 0x17, 0xAA, 0x06, 0x09, 0xFB, 0x5E, 0xC0, 0xDC, 0x0D, 0xEB,
                0x16, 0x5D, 0xF1, 0x05, 0xFD, 0x23, 0x92, 0x5D, 0xE4, 0xCE, 0xA6, 0x2D, 0x9C, 0x00, 0xD1,
                0xAE, 0xAE, 0x31, 0xF2, 0xEA, 0x06, 0xE1, 0x63, 0x76, 0xC1, 0x66, 0x93, 0xEC, 0xE8, 0xEB,
                0x46, 0x25, 0x8D, 0x94, 0xFB, 0xF0, 0x52, 0xAB, 0x83, 0xB2, 0xAE, 0x84, 0x7A, 0x7F, 0x92,
                0x39, 0x1E, 0x43, 0xF3
            },

            // PKCS #1 (A.1.2) Exponent 1.
            DP = new byte[] {
                0x0B, 0x20, 0x3D, 0x2A, 0xD4, 0x8A, 0xB6, 0x66, 0x34, 0x06, 0xE9, 0xE4, 0x88, 0xE6, 0x4C,
                0xB9, 0x84, 0x68, 0xA1, 0x70, 0xB8, 0xFE, 0xE2, 0x8B, 0x77, 0x0B, 0xF2, 0xF2, 0x7E, 0x6D,
                0x6D, 0xA3, 0x82, 0x27, 0x78, 0x3D, 0xDB, 0x21, 0x7E, 0x88, 0xBD, 0xDF, 0x09, 0x5A, 0xCF,
                0x9F, 0x7D, 0xFB, 0xA4, 0x84, 0x04, 0xE5, 0x63, 0x98, 0x5F, 0x9E, 0xDD, 0xA3, 0x4C, 0xEB,
                0x75, 0xFF, 0x27, 0xB1
            },

            // PKCS #1 (A.1.2) Exponent 2.
            DQ = new byte[] {
                0x5A, 0xBD, 0x0F, 0xE3, 0x77, 0xA8, 0x2B, 0x47, 0x51, 0xE9, 0x8E, 0x0B, 0x59, 0x44, 0xC0,
                0x78, 0x38, 0x63, 0x9E, 0xD4, 0x43, 0x7E, 0xA1, 0xFB, 0x35, 0x7B, 0xA7, 0x94, 0x1F, 0x56,
                0xD8, 0xD8, 0x14, 0x11, 0x3C, 0xD9, 0x6A, 0x1F, 0x44, 0xF7, 0x0E, 0x5F, 0x80, 0x0C, 0x95,
                0x54, 0xDA, 0x26, 0x1F, 0xCE, 0x64, 0xA2, 0xC4, 0x35, 0x25, 0x2E, 0xCC, 0x41, 0xB7, 0x99,
                0xDF, 0xD0, 0xBB, 0xFF
            },

            // PKCS #1 (A.1.2) Coefficient.
            InverseQ = new byte[] {
                0xB7, 0xE2, 0x86, 0x73, 0x94, 0x10, 0x55, 0xFF, 0x7F, 0x58, 0x77, 0x7E, 0x38, 0x4C, 0x6D,
                0xDA, 0xE4, 0x6A, 0x73, 0xAD, 0x28, 0xCF, 0x04, 0xDA, 0xE3, 0xA4, 0xD4, 0x3A, 0x4B, 0x3F,
                0xCE, 0x16, 0xFC, 0xEF, 0x7F, 0x36, 0x11, 0x67, 0xCE, 0x59, 0xE7, 0xF2, 0xAD, 0x8F, 0xAB,
                0x95, 0x5B, 0xC1, 0x62, 0x65, 0x7B, 0x89, 0xE8, 0x15, 0xEC, 0xF8, 0xB9, 0x4B, 0xE2, 0x3B,
                0x0F, 0x31, 0x03, 0xD3
            }
        };

        [Test]
        public void SignatureShouldBeValid()
        {
            string baseString = "POST&http%3A%2F%2Fterm.ie%2Foauth%2Fexample%2Frequest_token.php&oauth_consumer_key%3Dkey%26oauth_nonce%3D6971488%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1327336019%26oauth_version%3D1.0";

            Signature signature = new RsaSha1Signature(baseString, key);

            Assert.AreEqual("RSA-SHA1", signature.Method);
            AssertThatRsaSignatureMatches(signature.Value, new byte[] { 
                0x97, 0x7D, 0x8B, 0x51, 0x13,
                0x36, 0xF4, 0x0E, 0xF2, 0x00,
                0x65, 0x3F, 0x2C, 0x6A, 0x04,
                0x67, 0x36, 0x2E, 0x80, 0x09
            });
        }

        // It's not possible to directly compare two encryption output since RSA uses 
        // random padding on the input bytes. As a consequence, encrypting identical 
        // data twice with the same key will produce different results. Obviously, the 
        // decrypted data will be identical.
        private void AssertThatRsaSignatureMatches(string signature, byte[] expectedHash)
        {
            byte[] signatureBytes = Convert.FromBase64String(signature);
            byte[] signatureHash;

            using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
            {
                rsa.ImportParameters(key);
                signatureHash = rsa.Decrypt(signatureBytes, true);
            }

            Assert.That(signatureHash, Is.EqualTo(expectedHash));
        }
    }
}
